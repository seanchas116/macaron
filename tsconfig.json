{
    "version": "1.5.0-beta",
    "compilerOptions": {
        "target": "es6",
        "declaration": false,
        "noImplicitAny": true,
        "removeComments": true,
        "noLib": false,
        "preserveConstEnums": true,
        "suppressImplicitAnyIndexErrors": true,
        "sourceMap": true,
        "outDir": "./dest"
    },
    "filesGlob": [
        "./**/*.ts",
        "!./node_modules/**/*.ts"
    ],
    "files": [
        "./src/compiler/common/BaseError.ts",
        "./src/compiler/common/CompilationError.ts",
        "./src/compiler/common/ErrorInfo.ts",
        "./src/compiler/common/ErrorType.ts",
        "./src/compiler/common/SourceLocation.ts",
        "./src/compiler/compiler/Compiler.ts",
        "./src/compiler/emitter/CodeEmitter.ts",
        "./src/compiler/parser/AST.ts",
        "./src/compiler/parser/MacaronParser.ts",
        "./src/compiler/parser/Parser.ts",
        "./src/compiler/parser/operators.ts",
        "./src/compiler/parser/parsing/assignment.ts",
        "./src/compiler/parser/parsing/block.ts",
        "./src/compiler/parser/parsing/class.ts",
        "./src/compiler/parser/parsing/common.ts",
        "./src/compiler/parser/parsing/control.ts",
        "./src/compiler/parser/parsing/expression.ts",
        "./src/compiler/parser/parsing/function.ts",
        "./src/compiler/parser/parsing/functionCall.ts",
        "./src/compiler/parser/parsing/genericsCall.ts",
        "./src/compiler/parser/parsing/identifier.ts",
        "./src/compiler/parser/parsing/memberAccess.ts",
        "./src/compiler/parser/parsing/new.ts",
        "./src/compiler/parser/parsing/newVariable.ts",
        "./src/compiler/parser/parsing/number.ts",
        "./src/compiler/parser/parsing/operator.ts",
        "./src/compiler/parser/parsing/postfix.ts",
        "./src/compiler/parser/parsing/string.ts",
        "./src/compiler/parser/parsing/value.ts",
        "./src/compiler/typing/CallSignature.ts",
        "./src/compiler/typing/Environment.ts",
        "./src/compiler/typing/EvaluationContext.ts",
        "./src/compiler/typing/Evaluator.ts",
        "./src/compiler/typing/Expression.ts",
        "./src/compiler/typing/Identifier.ts",
        "./src/compiler/typing/Member.ts",
        "./src/compiler/typing/Operator.ts",
        "./src/compiler/typing/Thunk.ts",
        "./src/compiler/typing/Type.ts",
        "./src/compiler/typing/defaultEnvironment.ts",
        "./src/compiler/typing/expression/ClassExpression.ts",
        "./src/compiler/typing/expression/FunctionBodyExpression.ts",
        "./src/compiler/typing/expression/FunctionExpression.ts",
        "./src/compiler/typing/nativeTypes.ts",
        "./src/compiler/typing/thunk/ExpressionThunk.ts",
        "./src/compiler/typing/thunk/TypeThunk.ts",
        "./src/compiler/typing/type/ConstValueType.ts",
        "./src/compiler/typing/type/FunctionType.ts",
        "./src/compiler/typing/type/GenericsParameterType.ts",
        "./src/compiler/typing/type/GenericsType.ts",
        "./src/compiler/typing/type/MetaType.ts",
        "./src/compiler/typing/type/TupleType.ts",
        "./src/compiler/typing/type/UnionType.ts",
        "./src/test/compilerTest.ts",
        "./src/test/parserTest.ts",
        "./src/test/support/loadPattern.ts",
        "./typings/empower/empower.d.ts",
        "./typings/mocha/mocha.d.ts",
        "./typings/node/node.d.ts",
        "./typings/power-assert-formatter/power-assert-formatter.d.ts",
        "./typings/power-assert/power-assert.d.ts",
        "./typings/source-map/source-map.d.ts",
        "./typings/tsd.d.ts"
    ],
    "compileOnSave": true
}
