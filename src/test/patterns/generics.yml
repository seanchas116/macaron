- title: generic function
  src: |
    func foo<T>(a T, b T, c T) {
      b
    }
    foo<number>(1, 2, 3)
  expected: 2
- title: calling generic function directly
  src: |
    func foo<T>(a T, b T, c T) {
      b
    }
    foo(1, 2, 3)
  # TODO: improve error message
  error: Type '(T,T,T) => T' cannot be called with [number, number, number]
- title: generic function with type constraint
  src: |
    interface Foo {
      foo() number
    }
    interface Bar: Foo {
      bar() string
    }
    class Hoge {
      foo() { 100 }
      bar() { "hoge" }
    }
    class Piyo {
      foo() { 200 }
      bar() { "piyo" }
    }
    func foo<T: Bar>(a T, b T) {
      a.foo() + b.foo()
    }
    foo<Bar>(new Hoge(), new Piyo())
  expected: 300
- title: generic class
  src: |
    class Foo<T> {
      passT(x T) { x }
    }
    let foo = new Foo<string>()
    foo.pass("hogehoge")
  expected: hogehoge
